from libcpp cimport bool # access bool as bool

cdef extern from "kdp/kdpVectors.hpp" namespace "kdp":
	
	#####################################################################
	
	# This is exactly the way that enums classes must be decalared
	# The name of the enum class must be different than the name in C
	# The name of the variable must then contain the fully qualified name of the enum
	# The enum value must be referred to only by its individual name, not it's full name
	# (e.g. use LengthPhi, not Vec2from_c.LengthPhi)
	cdef enum Vec2from_c:
		LengthPhi "kdp::Vec2from::LengthPhi"
		
	#####################################################################
	
	cdef cppclass Vec2_c "kdp::Vec2":
		double x1
		double x2

		Vec2_c()
		Vec2_c(bool)
		Vec2_c(const Vec2_c& orig)
		Vec2_c(const double, const double)
		Vec2_c(const double, const double, const Vec2from_c argFormat)

		# SUPER IMPORTANT ... must rename assignment operator =, 
		# othwewise deref(ptr) = obj will fail with "Cannot assign to or delete this"
		Vec2_c& assign "operator=" (const Vec2_c&)
		
		# SUPER IMPORTANT ... must rename OP= operators, 
		# otherwise lhs += rhs fails with "Overloading operator '+=' not yet supported"
		Vec2_c& addEquals "operator+=" (const Vec2_c&)
		Vec2_c& subEquals "operator-=" (const Vec2_c&)
		Vec2_c& mulEquals "operator*=" (double const)
		Vec2_c& divEquals "operator/=" (double const)
		
		Vec2_c operator+(const Vec2_c& that) const
		Vec2_c operator-(const Vec2_c& that) const
		Vec2_c operator*(const double scale) const
		Vec2_c operator/(const double scale) const

		Vec2_c operator-() const
		
		Vec2_c& Normalize()
		
		double Mag() const
		double Mag2() const
		
		double Phi() const
		
		double Dot(const Vec2_c&) const
		double Cross(const Vec2_c&) const
		double InteriorAngle(const Vec2_c&) const
	
	#####################################################################

	cdef enum Vec3from_c:
		LengthEtaPhi "kdp::Vec3from::LengthEtaPhi"
		LengthThetaPhi "kdp::Vec3from::LengthThetaPhi"
		
	#####################################################################
		
	cdef cppclass Vec3_c "kdp::Vec3":
		double x1
		double x2
		double x3

		Vec3_c()
		Vec3_c(bool)
		Vec3_c(const double, const double, const double)
		Vec3_c(const double, const double, const double, const Vec3from_c argFormat)

		Vec3_c& assign "operator=" (const Vec3_c&)
		
		Vec3_c& addEquals "operator+=" (const Vec3_c&)
		Vec3_c& subEquals "operator-=" (const Vec3_c&)
		Vec3_c& mulEquals "operator*=" (double const)
		Vec3_c& divEquals "operator/=" (double const)
		
		Vec3_c operator+(const Vec3_c& that) const
		Vec3_c operator-(const Vec3_c& that) const
		Vec3_c operator*(const double scale) const
		Vec3_c operator/(const double scale) const
		
		Vec3_c operator-() const
		
		Vec2_c& T()
#~ 		const Vec2_c& T() const
		
		Vec3_c& Normalize()
		
		double Mag() const
		double Mag2() const
		
		double Eta() const
		double Theta() const		
		double Phi() const
		
		double Dot(const Vec3_c&) const
		Vec3_c Cross(const Vec3_c&) const
		double InteriorAngle(const Vec3_c&) const
		
	#####################################################################
		
	cdef enum Vec4from4_c:
		EnergyEtaPhiM "kdp::Vec4from4::EnergyEtaPhiM"
	
	#####################################################################
	
	cdef enum Vec4from2_c:
		Energy "kdp::Vec4from2::Energy"
		Time "kdp::Vec4from2::Time"
		Mass "kdp::Vec4from2::Mass"
		Length "kdp::Vec4from2::Length"
		Boost_preserve_E "kdp::Vec4from2::Boost_preserve_E"
		Boost_preserve_p3 "kdp::Vec4from2::Boost_preserve_p3"
		
	#####################################################################

	cdef cppclass Vec4_c "kdp::Vec4":
		double x0
		double x1
		double x2
		double x3		

		Vec4_c()
		Vec4_c(bool)
		Vec4_c(const double, const double, const double, const double)
		Vec4_c(const double, const double, const double, const double, const Vec4from4_c argFormat)
		Vec4_c(const double, const Vec3_c&, Vec4from2_c)
		
		Vec4_c& assign "operator=" (const Vec4_c&)
		
		Vec4_c& addEquals "operator+=" (const Vec4_c&)
		Vec4_c& subEquals "operator-=" (const Vec4_c&)
		Vec4_c& mulEquals "operator*=" (double const)
		Vec4_c& divEquals "operator/=" (double const)
		
		Vec4_c operator+(const Vec4_c& that) const
		Vec4_c operator-(const Vec4_c& that) const
		Vec4_c operator*(const double scale) const
		Vec4_c operator/(const double scale) const
		
		Vec4_c operator-() const
		
		Vec3_c& x()
		Vec3_c& p()

		double Length() const
		double Length2() const
		
		double Rapidity() const
		
		double Contract(const Vec4_c&) const
